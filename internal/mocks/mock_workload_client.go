// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackpath/virtual-kubelet-stackpath/internal/api/workload/workload_client/workload (interfaces: ClientService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
	workload "github.com/stackpath/virtual-kubelet-stackpath/internal/api/workload/workload_client/workload"
)

// WorkloadClientService is a mock of ClientService interface.
type WorkloadClientService struct {
	ctrl     *gomock.Controller
	recorder *WorkloadClientServiceMockRecorder
}

// WorkloadClientServiceMockRecorder is the mock recorder for WorkloadClientService.
type WorkloadClientServiceMockRecorder struct {
	mock *WorkloadClientService
}

// NewWorkloadClientService creates a new mock instance.
func NewWorkloadClientService(ctrl *gomock.Controller) *WorkloadClientService {
	mock := &WorkloadClientService{ctrl: ctrl}
	mock.recorder = &WorkloadClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *WorkloadClientService) EXPECT() *WorkloadClientServiceMockRecorder {
	return m.recorder
}

// CreateWorkload mocks base method.
func (m *WorkloadClientService) CreateWorkload(arg0 *workload.CreateWorkloadParams, arg1 runtime.ClientAuthInfoWriter, arg2 ...workload.ClientOption) (*workload.CreateWorkloadOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWorkload", varargs...)
	ret0, _ := ret[0].(*workload.CreateWorkloadOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkload indicates an expected call of CreateWorkload.
func (mr *WorkloadClientServiceMockRecorder) CreateWorkload(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkload", reflect.TypeOf((*WorkloadClientService)(nil).CreateWorkload), varargs...)
}

// DeleteWorkload mocks base method.
func (m *WorkloadClientService) DeleteWorkload(arg0 *workload.DeleteWorkloadParams, arg1 runtime.ClientAuthInfoWriter, arg2 ...workload.ClientOption) (*workload.DeleteWorkloadNoContent, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWorkload", varargs...)
	ret0, _ := ret[0].(*workload.DeleteWorkloadNoContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkload indicates an expected call of DeleteWorkload.
func (mr *WorkloadClientServiceMockRecorder) DeleteWorkload(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkload", reflect.TypeOf((*WorkloadClientService)(nil).DeleteWorkload), varargs...)
}

// GetLocations mocks base method.
func (m *WorkloadClientService) GetLocations(arg0 *workload.GetLocationsParams, arg1 runtime.ClientAuthInfoWriter, arg2 ...workload.ClientOption) (*workload.GetLocationsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLocations", varargs...)
	ret0, _ := ret[0].(*workload.GetLocationsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocations indicates an expected call of GetLocations.
func (mr *WorkloadClientServiceMockRecorder) GetLocations(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocations", reflect.TypeOf((*WorkloadClientService)(nil).GetLocations), varargs...)
}

// GetWorkload mocks base method.
func (m *WorkloadClientService) GetWorkload(arg0 *workload.GetWorkloadParams, arg1 runtime.ClientAuthInfoWriter, arg2 ...workload.ClientOption) (*workload.GetWorkloadOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkload", varargs...)
	ret0, _ := ret[0].(*workload.GetWorkloadOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkload indicates an expected call of GetWorkload.
func (mr *WorkloadClientServiceMockRecorder) GetWorkload(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkload", reflect.TypeOf((*WorkloadClientService)(nil).GetWorkload), varargs...)
}

// GetWorkloads mocks base method.
func (m *WorkloadClientService) GetWorkloads(arg0 *workload.GetWorkloadsParams, arg1 runtime.ClientAuthInfoWriter, arg2 ...workload.ClientOption) (*workload.GetWorkloadsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkloads", varargs...)
	ret0, _ := ret[0].(*workload.GetWorkloadsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkloads indicates an expected call of GetWorkloads.
func (mr *WorkloadClientServiceMockRecorder) GetWorkloads(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkloads", reflect.TypeOf((*WorkloadClientService)(nil).GetWorkloads), varargs...)
}

// PutWorkload mocks base method.
func (m *WorkloadClientService) PutWorkload(arg0 *workload.PutWorkloadParams, arg1 runtime.ClientAuthInfoWriter, arg2 ...workload.ClientOption) (*workload.PutWorkloadOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutWorkload", varargs...)
	ret0, _ := ret[0].(*workload.PutWorkloadOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutWorkload indicates an expected call of PutWorkload.
func (mr *WorkloadClientServiceMockRecorder) PutWorkload(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutWorkload", reflect.TypeOf((*WorkloadClientService)(nil).PutWorkload), varargs...)
}

// SetTransport mocks base method.
func (m *WorkloadClientService) SetTransport(arg0 runtime.ClientTransport) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransport", arg0)
}

// SetTransport indicates an expected call of SetTransport.
func (mr *WorkloadClientServiceMockRecorder) SetTransport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransport", reflect.TypeOf((*WorkloadClientService)(nil).SetTransport), arg0)
}

// UpdateWorkload mocks base method.
func (m *WorkloadClientService) UpdateWorkload(arg0 *workload.UpdateWorkloadParams, arg1 runtime.ClientAuthInfoWriter, arg2 ...workload.ClientOption) (*workload.UpdateWorkloadOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWorkload", varargs...)
	ret0, _ := ret[0].(*workload.UpdateWorkloadOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkload indicates an expected call of UpdateWorkload.
func (mr *WorkloadClientServiceMockRecorder) UpdateWorkload(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkload", reflect.TypeOf((*WorkloadClientService)(nil).UpdateWorkload), varargs...)
}
