// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackpath/virtual-kubelet-stackpath/internal/api/workload/workload_client/instances (interfaces: ClientService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
	instances "github.com/stackpath/virtual-kubelet-stackpath/internal/api/workload/workload_client/instances"
)

// InstancesClientService is a mock of ClientService interface.
type InstancesClientService struct {
	ctrl     *gomock.Controller
	recorder *InstancesClientServiceMockRecorder
}

// InstancesClientServiceMockRecorder is the mock recorder for InstancesClientService.
type InstancesClientServiceMockRecorder struct {
	mock *InstancesClientService
}

// NewInstancesClientService creates a new mock instance.
func NewInstancesClientService(ctrl *gomock.Controller) *InstancesClientService {
	mock := &InstancesClientService{ctrl: ctrl}
	mock.recorder = &InstancesClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *InstancesClientService) EXPECT() *InstancesClientServiceMockRecorder {
	return m.recorder
}

// GetWorkloadInstances mocks base method.
func (m *InstancesClientService) GetWorkloadInstances(arg0 *instances.GetWorkloadInstancesParams, arg1 runtime.ClientAuthInfoWriter, arg2 ...instances.ClientOption) (*instances.GetWorkloadInstancesOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWorkloadInstances", varargs...)
	ret0, _ := ret[0].(*instances.GetWorkloadInstancesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkloadInstances indicates an expected call of GetWorkloadInstances.
func (mr *InstancesClientServiceMockRecorder) GetWorkloadInstances(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkloadInstances", reflect.TypeOf((*InstancesClientService)(nil).GetWorkloadInstances), varargs...)
}

// SetTransport mocks base method.
func (m *InstancesClientService) SetTransport(arg0 runtime.ClientTransport) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransport", arg0)
}

// SetTransport indicates an expected call of SetTransport.
func (mr *InstancesClientServiceMockRecorder) SetTransport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransport", reflect.TypeOf((*InstancesClientService)(nil).SetTransport), arg0)
}
