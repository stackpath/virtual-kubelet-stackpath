// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackpath/vk-stackpath-provider/internal/api/workload/workload_client/metrics (interfaces: ClientService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
	metrics "github.com/stackpath/vk-stackpath-provider/internal/api/workload/workload_client/metrics"
)

// MetricsClientService is a mock of ClientService interface.
type MetricsClientService struct {
	ctrl     *gomock.Controller
	recorder *MetricsClientServiceMockRecorder
}

// MetricsClientServiceMockRecorder is the mock recorder for MetricsClientService.
type MetricsClientServiceMockRecorder struct {
	mock *MetricsClientService
}

// NewMetricsClientService creates a new mock instance.
func NewMetricsClientService(ctrl *gomock.Controller) *MetricsClientService {
	mock := &MetricsClientService{ctrl: ctrl}
	mock.recorder = &MetricsClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MetricsClientService) EXPECT() *MetricsClientServiceMockRecorder {
	return m.recorder
}

// GetMetrics mocks base method.
func (m *MetricsClientService) GetMetrics(arg0 *metrics.GetMetricsParams, arg1 runtime.ClientAuthInfoWriter, arg2 ...metrics.ClientOption) (*metrics.GetMetricsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMetrics", varargs...)
	ret0, _ := ret[0].(*metrics.GetMetricsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MetricsClientServiceMockRecorder) GetMetrics(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MetricsClientService)(nil).GetMetrics), varargs...)
}

// SetTransport mocks base method.
func (m *MetricsClientService) SetTransport(arg0 runtime.ClientTransport) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransport", arg0)
}

// SetTransport indicates an expected call of SetTransport.
func (mr *MetricsClientServiceMockRecorder) SetTransport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransport", reflect.TypeOf((*MetricsClientService)(nil).SetTransport), arg0)
}
