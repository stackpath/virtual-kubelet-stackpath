// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackpath/virtual-kubelet-stackpath/internal/api/workload/workload_client/instance_logs (interfaces: ClientService)

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
	instance_logs "github.com/stackpath/virtual-kubelet-stackpath/internal/api/workload/workload_client/instance_logs"
)

// InstanceLogsClientService is a mock of ClientService interface.
type InstanceLogsClientService struct {
	ctrl     *gomock.Controller
	recorder *InstanceLogsClientServiceMockRecorder
}

// InstanceLogsClientServiceMockRecorder is the mock recorder for InstanceLogsClientService.
type InstanceLogsClientServiceMockRecorder struct {
	mock *InstanceLogsClientService
}

// NewInstanceLogsClientService creates a new mock instance.
func NewInstanceLogsClientService(ctrl *gomock.Controller) *InstanceLogsClientService {
	mock := &InstanceLogsClientService{ctrl: ctrl}
	mock.recorder = &InstanceLogsClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *InstanceLogsClientService) EXPECT() *InstanceLogsClientServiceMockRecorder {
	return m.recorder
}

// GetLogs mocks base method.
func (m *InstanceLogsClientService) GetLogs(arg0 *instance_logs.GetLogsParams, arg1 runtime.ClientAuthInfoWriter, arg2 io.Writer, arg3 ...instance_logs.ClientOption) (*instance_logs.GetLogsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLogs", varargs...)
	ret0, _ := ret[0].(*instance_logs.GetLogsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogs indicates an expected call of GetLogs.
func (mr *InstanceLogsClientServiceMockRecorder) GetLogs(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*InstanceLogsClientService)(nil).GetLogs), varargs...)
}

// SetTransport mocks base method.
func (m *InstanceLogsClientService) SetTransport(arg0 runtime.ClientTransport) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransport", arg0)
}

// SetTransport indicates an expected call of SetTransport.
func (mr *InstanceLogsClientServiceMockRecorder) SetTransport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransport", reflect.TypeOf((*InstanceLogsClientService)(nil).SetTransport), arg0)
}
