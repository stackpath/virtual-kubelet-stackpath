// Code generated by go-swagger; DO NOT EDIT.

package workload_client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/stackpath/virtual-kubelet-stackpath/internal/api/workload/workload_client/image"
	"github.com/stackpath/virtual-kubelet-stackpath/internal/api/workload/workload_client/instance"
	"github.com/stackpath/virtual-kubelet-stackpath/internal/api/workload/workload_client/instance_logs"
	"github.com/stackpath/virtual-kubelet-stackpath/internal/api/workload/workload_client/metrics"
	"github.com/stackpath/virtual-kubelet-stackpath/internal/api/workload/workload_client/workload"
)

// Default edge compute HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "gateway.stackpath.com"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"https"}

// NewHTTPClient creates a new edge compute HTTP client.
func NewHTTPClient(formats strfmt.Registry) *EdgeCompute {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new edge compute HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *EdgeCompute {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new edge compute client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *EdgeCompute {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(EdgeCompute)
	cli.Transport = transport
	cli.Image = image.New(transport, formats)
	cli.Instance = instance.New(transport, formats)
	cli.InstanceLogs = instance_logs.New(transport, formats)
	cli.Metrics = metrics.New(transport, formats)
	cli.Workload = workload.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// EdgeCompute is a client for edge compute
type EdgeCompute struct {
	Image image.ClientService

	Instance instance.ClientService

	InstanceLogs instance_logs.ClientService

	Metrics metrics.ClientService

	Workload workload.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *EdgeCompute) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.Image.SetTransport(transport)
	c.Instance.SetTransport(transport)
	c.InstanceLogs.SetTransport(transport)
	c.Metrics.SetTransport(transport)
	c.Workload.SetTransport(transport)
}
