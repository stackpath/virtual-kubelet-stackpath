// Code generated by go-swagger; DO NOT EDIT.

package workload

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/stackpath/virtual-kubelet-stackpath/internal/api/workload/workload_models"
)

// WatchNetworks2Reader is a Reader for the WatchNetworks2 structure.
type WatchNetworks2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WatchNetworks2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewWatchNetworks2OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewWatchNetworks2Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewWatchNetworks2InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewWatchNetworks2Default(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewWatchNetworks2OK creates a WatchNetworks2OK with default headers values
func NewWatchNetworks2OK() *WatchNetworks2OK {
	return &WatchNetworks2OK{}
}

/*
WatchNetworks2OK describes a response with status code 200, with default header values.

(streaming responses)
*/
type WatchNetworks2OK struct {
	Payload *workload_models.V1WatchNetworksResponse
}

// IsSuccess returns true when this watch networks2 o k response has a 2xx status code
func (o *WatchNetworks2OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this watch networks2 o k response has a 3xx status code
func (o *WatchNetworks2OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this watch networks2 o k response has a 4xx status code
func (o *WatchNetworks2OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this watch networks2 o k response has a 5xx status code
func (o *WatchNetworks2OK) IsServerError() bool {
	return false
}

// IsCode returns true when this watch networks2 o k response a status code equal to that given
func (o *WatchNetworks2OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the watch networks2 o k response
func (o *WatchNetworks2OK) Code() int {
	return 200
}

func (o *WatchNetworks2OK) Error() string {
	return fmt.Sprintf("[GET /workload/v1/stacks/{stack_id}/watch/networks][%d] watchNetworks2OK  %+v", 200, o.Payload)
}

func (o *WatchNetworks2OK) String() string {
	return fmt.Sprintf("[GET /workload/v1/stacks/{stack_id}/watch/networks][%d] watchNetworks2OK  %+v", 200, o.Payload)
}

func (o *WatchNetworks2OK) GetPayload() *workload_models.V1WatchNetworksResponse {
	return o.Payload
}

func (o *WatchNetworks2OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(workload_models.V1WatchNetworksResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWatchNetworks2Unauthorized creates a WatchNetworks2Unauthorized with default headers values
func NewWatchNetworks2Unauthorized() *WatchNetworks2Unauthorized {
	return &WatchNetworks2Unauthorized{}
}

/*
WatchNetworks2Unauthorized describes a response with status code 401, with default header values.

Returned when an unauthorized request is attempted.
*/
type WatchNetworks2Unauthorized struct {
	Payload *workload_models.StackpathapiStatus
}

// IsSuccess returns true when this watch networks2 unauthorized response has a 2xx status code
func (o *WatchNetworks2Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this watch networks2 unauthorized response has a 3xx status code
func (o *WatchNetworks2Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this watch networks2 unauthorized response has a 4xx status code
func (o *WatchNetworks2Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this watch networks2 unauthorized response has a 5xx status code
func (o *WatchNetworks2Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this watch networks2 unauthorized response a status code equal to that given
func (o *WatchNetworks2Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the watch networks2 unauthorized response
func (o *WatchNetworks2Unauthorized) Code() int {
	return 401
}

func (o *WatchNetworks2Unauthorized) Error() string {
	return fmt.Sprintf("[GET /workload/v1/stacks/{stack_id}/watch/networks][%d] watchNetworks2Unauthorized  %+v", 401, o.Payload)
}

func (o *WatchNetworks2Unauthorized) String() string {
	return fmt.Sprintf("[GET /workload/v1/stacks/{stack_id}/watch/networks][%d] watchNetworks2Unauthorized  %+v", 401, o.Payload)
}

func (o *WatchNetworks2Unauthorized) GetPayload() *workload_models.StackpathapiStatus {
	return o.Payload
}

func (o *WatchNetworks2Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(workload_models.StackpathapiStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWatchNetworks2InternalServerError creates a WatchNetworks2InternalServerError with default headers values
func NewWatchNetworks2InternalServerError() *WatchNetworks2InternalServerError {
	return &WatchNetworks2InternalServerError{}
}

/*
WatchNetworks2InternalServerError describes a response with status code 500, with default header values.

Internal server error.
*/
type WatchNetworks2InternalServerError struct {
	Payload *workload_models.StackpathapiStatus
}

// IsSuccess returns true when this watch networks2 internal server error response has a 2xx status code
func (o *WatchNetworks2InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this watch networks2 internal server error response has a 3xx status code
func (o *WatchNetworks2InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this watch networks2 internal server error response has a 4xx status code
func (o *WatchNetworks2InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this watch networks2 internal server error response has a 5xx status code
func (o *WatchNetworks2InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this watch networks2 internal server error response a status code equal to that given
func (o *WatchNetworks2InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the watch networks2 internal server error response
func (o *WatchNetworks2InternalServerError) Code() int {
	return 500
}

func (o *WatchNetworks2InternalServerError) Error() string {
	return fmt.Sprintf("[GET /workload/v1/stacks/{stack_id}/watch/networks][%d] watchNetworks2InternalServerError  %+v", 500, o.Payload)
}

func (o *WatchNetworks2InternalServerError) String() string {
	return fmt.Sprintf("[GET /workload/v1/stacks/{stack_id}/watch/networks][%d] watchNetworks2InternalServerError  %+v", 500, o.Payload)
}

func (o *WatchNetworks2InternalServerError) GetPayload() *workload_models.StackpathapiStatus {
	return o.Payload
}

func (o *WatchNetworks2InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(workload_models.StackpathapiStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWatchNetworks2Default creates a WatchNetworks2Default with default headers values
func NewWatchNetworks2Default(code int) *WatchNetworks2Default {
	return &WatchNetworks2Default{
		_statusCode: code,
	}
}

/*
WatchNetworks2Default describes a response with status code -1, with default header values.

Default error structure.
*/
type WatchNetworks2Default struct {
	_statusCode int

	Payload *workload_models.StackpathapiStatus
}

// IsSuccess returns true when this watch networks2 default response has a 2xx status code
func (o *WatchNetworks2Default) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this watch networks2 default response has a 3xx status code
func (o *WatchNetworks2Default) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this watch networks2 default response has a 4xx status code
func (o *WatchNetworks2Default) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this watch networks2 default response has a 5xx status code
func (o *WatchNetworks2Default) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this watch networks2 default response a status code equal to that given
func (o *WatchNetworks2Default) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the watch networks2 default response
func (o *WatchNetworks2Default) Code() int {
	return o._statusCode
}

func (o *WatchNetworks2Default) Error() string {
	return fmt.Sprintf("[GET /workload/v1/stacks/{stack_id}/watch/networks][%d] WatchNetworks2 default  %+v", o._statusCode, o.Payload)
}

func (o *WatchNetworks2Default) String() string {
	return fmt.Sprintf("[GET /workload/v1/stacks/{stack_id}/watch/networks][%d] WatchNetworks2 default  %+v", o._statusCode, o.Payload)
}

func (o *WatchNetworks2Default) GetPayload() *workload_models.StackpathapiStatus {
	return o.Payload
}

func (o *WatchNetworks2Default) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(workload_models.StackpathapiStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
