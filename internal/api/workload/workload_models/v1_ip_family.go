// Code generated by go-swagger; DO NOT EDIT.

package workload_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1IPFamily supported IP families
//
// - IP_FAMILY_UNSPECIFIED: Unknown IP family
//   - IPv4: IPv4 IP family.
//   - IPv6: IPv6 IP family. Currently, IPv6 IP family must be used with IPv4.
//
// swagger:model v1IPFamily
type V1IPFamily string

func NewV1IPFamily(value V1IPFamily) *V1IPFamily {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1IPFamily.
func (m V1IPFamily) Pointer() *V1IPFamily {
	return &m
}

const (

	// V1IPFamilyIPFAMILYUNSPECIFIED captures enum value "IP_FAMILY_UNSPECIFIED"
	V1IPFamilyIPFAMILYUNSPECIFIED V1IPFamily = "IP_FAMILY_UNSPECIFIED"

	// V1IPFamilyIPV4 captures enum value "IPv4"
	V1IPFamilyIPV4 V1IPFamily = "IPv4"

	// V1IPFamilyIPV6 captures enum value "IPv6"
	V1IPFamilyIPV6 V1IPFamily = "IPv6"
)

// for schema
var v1IpFamilyEnum []interface{}

func init() {
	var res []V1IPFamily
	if err := json.Unmarshal([]byte(`["IP_FAMILY_UNSPECIFIED","IPv4","IPv6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1IpFamilyEnum = append(v1IpFamilyEnum, v)
	}
}

func (m V1IPFamily) validateV1IPFamilyEnum(path, location string, value V1IPFamily) error {
	if err := validate.EnumCase(path, location, value, v1IpFamilyEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 IP family
func (m V1IPFamily) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1IPFamilyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 IP family based on context it is used
func (m V1IPFamily) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
