// Code generated by go-swagger; DO NOT EDIT.

package workload_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1ImageDeprecation Deprecation settings for an image
//
// swagger:model v1ImageDeprecation
type V1ImageDeprecation struct {

	// The date when the image will be deleted
	//
	// This value cannot be before the deprecation or obsoletion dates (when they are present).
	// Format: date-time
	DeletionDate strfmt.DateTime `json:"deletionDate,omitempty"`

	// The date which the image will be deprecated
	//
	// Deprecated images may still be used when creating instances, but users will want to upgrade.
	// Format: date-time
	DeprecationDate strfmt.DateTime `json:"deprecationDate,omitempty"`

	// The date which the image will be obsolete
	//
	// Obsolete images cannot be used when creating instances. When present, deprecation date must also present and on or before this value.
	// Format: date-time
	ObsoletionDate strfmt.DateTime `json:"obsoletionDate,omitempty"`
}

// Validate validates this v1 image deprecation
func (m *V1ImageDeprecation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeletionDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeprecationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObsoletionDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ImageDeprecation) validateDeletionDate(formats strfmt.Registry) error {
	if swag.IsZero(m.DeletionDate) { // not required
		return nil
	}

	if err := validate.FormatOf("deletionDate", "body", "date-time", m.DeletionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1ImageDeprecation) validateDeprecationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.DeprecationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("deprecationDate", "body", "date-time", m.DeprecationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V1ImageDeprecation) validateObsoletionDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ObsoletionDate) { // not required
		return nil
	}

	if err := validate.FormatOf("obsoletionDate", "body", "date-time", m.ObsoletionDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v1 image deprecation based on context it is used
func (m *V1ImageDeprecation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1ImageDeprecation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ImageDeprecation) UnmarshalBinary(b []byte) error {
	var res V1ImageDeprecation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
