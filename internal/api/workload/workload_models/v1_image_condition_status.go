// Code generated by go-swagger; DO NOT EDIT.

package workload_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1ImageConditionStatus Which status an image is currently in
//
// - IMAGE_CONDITION_STATUS_UNKNOWN: The condition status is unknown
//   - TRUE: The condition is true
//   - FALSE: The condition is false
//
// swagger:model v1ImageConditionStatus
type V1ImageConditionStatus string

func NewV1ImageConditionStatus(value V1ImageConditionStatus) *V1ImageConditionStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1ImageConditionStatus.
func (m V1ImageConditionStatus) Pointer() *V1ImageConditionStatus {
	return &m
}

const (

	// V1ImageConditionStatusIMAGECONDITIONSTATUSUNKNOWN captures enum value "IMAGE_CONDITION_STATUS_UNKNOWN"
	V1ImageConditionStatusIMAGECONDITIONSTATUSUNKNOWN V1ImageConditionStatus = "IMAGE_CONDITION_STATUS_UNKNOWN"

	// V1ImageConditionStatusTRUE captures enum value "TRUE"
	V1ImageConditionStatusTRUE V1ImageConditionStatus = "TRUE"

	// V1ImageConditionStatusFALSE captures enum value "FALSE"
	V1ImageConditionStatusFALSE V1ImageConditionStatus = "FALSE"
)

// for schema
var v1ImageConditionStatusEnum []interface{}

func init() {
	var res []V1ImageConditionStatus
	if err := json.Unmarshal([]byte(`["IMAGE_CONDITION_STATUS_UNKNOWN","TRUE","FALSE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ImageConditionStatusEnum = append(v1ImageConditionStatusEnum, v)
	}
}

func (m V1ImageConditionStatus) validateV1ImageConditionStatusEnum(path, location string, value V1ImageConditionStatus) error {
	if err := validate.EnumCase(path, location, value, v1ImageConditionStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 image condition status
func (m V1ImageConditionStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1ImageConditionStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 image condition status based on context it is used
func (m V1ImageConditionStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
