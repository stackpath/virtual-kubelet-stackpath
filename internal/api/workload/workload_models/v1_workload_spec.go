// Code generated by go-swagger; DO NOT EDIT.

package workload_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1WorkloadSpec The specification for the desired state of a workload
//
// swagger:model v1WorkloadSpec
type V1WorkloadSpec struct {

	// containers
	Containers V1ContainerSpecMapEntry `json:"containers,omitempty"`

	// image pull credentials
	ImagePullCredentials V1WrappedImagePullCredentials `json:"imagePullCredentials,omitempty"`

	// init containers
	InitContainers V1ContainerSpecMapEntry `json:"initContainers,omitempty"`

	// Network interfaces to bind to the workload's instances
	NetworkInterfaces []*V1NetworkInterface `json:"networkInterfaces"`

	// runtime
	Runtime *V1WorkloadInstanceRuntimeSettings `json:"runtime,omitempty"`

	// virtual machines
	VirtualMachines V1VirtualMachineSpecMapEntry `json:"virtualMachines,omitempty"`

	// A list of claims that instances may reference
	//
	// The slug of the claim will be used in combination with the name of the instance to create a stable identifier. The slug should be used in the volume mount specifications for containers and VMs.
	VolumeClaimTemplates []*V1VolumeClaim `json:"volumeClaimTemplates"`
}

// Validate validates this v1 workload spec
func (m *V1WorkloadSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContainers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImagePullCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitContainers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkInterfaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuntime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualMachines(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeClaimTemplates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1WorkloadSpec) validateContainers(formats strfmt.Registry) error {
	if swag.IsZero(m.Containers) { // not required
		return nil
	}

	if m.Containers != nil {
		if err := m.Containers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("containers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("containers")
			}
			return err
		}
	}

	return nil
}

func (m *V1WorkloadSpec) validateImagePullCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.ImagePullCredentials) { // not required
		return nil
	}

	if err := m.ImagePullCredentials.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("imagePullCredentials")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("imagePullCredentials")
		}
		return err
	}

	return nil
}

func (m *V1WorkloadSpec) validateInitContainers(formats strfmt.Registry) error {
	if swag.IsZero(m.InitContainers) { // not required
		return nil
	}

	if m.InitContainers != nil {
		if err := m.InitContainers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initContainers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("initContainers")
			}
			return err
		}
	}

	return nil
}

func (m *V1WorkloadSpec) validateNetworkInterfaces(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkInterfaces) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkInterfaces); i++ {
		if swag.IsZero(m.NetworkInterfaces[i]) { // not required
			continue
		}

		if m.NetworkInterfaces[i] != nil {
			if err := m.NetworkInterfaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkInterfaces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkInterfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1WorkloadSpec) validateRuntime(formats strfmt.Registry) error {
	if swag.IsZero(m.Runtime) { // not required
		return nil
	}

	if m.Runtime != nil {
		if err := m.Runtime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runtime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runtime")
			}
			return err
		}
	}

	return nil
}

func (m *V1WorkloadSpec) validateVirtualMachines(formats strfmt.Registry) error {
	if swag.IsZero(m.VirtualMachines) { // not required
		return nil
	}

	if m.VirtualMachines != nil {
		if err := m.VirtualMachines.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("virtualMachines")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("virtualMachines")
			}
			return err
		}
	}

	return nil
}

func (m *V1WorkloadSpec) validateVolumeClaimTemplates(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeClaimTemplates) { // not required
		return nil
	}

	for i := 0; i < len(m.VolumeClaimTemplates); i++ {
		if swag.IsZero(m.VolumeClaimTemplates[i]) { // not required
			continue
		}

		if m.VolumeClaimTemplates[i] != nil {
			if err := m.VolumeClaimTemplates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeClaimTemplates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumeClaimTemplates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 workload spec based on the context it is used
func (m *V1WorkloadSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContainers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImagePullCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInitContainers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkInterfaces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRuntime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVirtualMachines(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumeClaimTemplates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1WorkloadSpec) contextValidateContainers(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Containers.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("containers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("containers")
		}
		return err
	}

	return nil
}

func (m *V1WorkloadSpec) contextValidateImagePullCredentials(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ImagePullCredentials.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("imagePullCredentials")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("imagePullCredentials")
		}
		return err
	}

	return nil
}

func (m *V1WorkloadSpec) contextValidateInitContainers(ctx context.Context, formats strfmt.Registry) error {

	if err := m.InitContainers.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("initContainers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("initContainers")
		}
		return err
	}

	return nil
}

func (m *V1WorkloadSpec) contextValidateNetworkInterfaces(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetworkInterfaces); i++ {

		if m.NetworkInterfaces[i] != nil {
			if err := m.NetworkInterfaces[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkInterfaces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkInterfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1WorkloadSpec) contextValidateRuntime(ctx context.Context, formats strfmt.Registry) error {

	if m.Runtime != nil {
		if err := m.Runtime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runtime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runtime")
			}
			return err
		}
	}

	return nil
}

func (m *V1WorkloadSpec) contextValidateVirtualMachines(ctx context.Context, formats strfmt.Registry) error {

	if err := m.VirtualMachines.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("virtualMachines")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("virtualMachines")
		}
		return err
	}

	return nil
}

func (m *V1WorkloadSpec) contextValidateVolumeClaimTemplates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VolumeClaimTemplates); i++ {

		if m.VolumeClaimTemplates[i] != nil {
			if err := m.VolumeClaimTemplates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeClaimTemplates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumeClaimTemplates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1WorkloadSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1WorkloadSpec) UnmarshalBinary(b []byte) error {
	var res V1WorkloadSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
