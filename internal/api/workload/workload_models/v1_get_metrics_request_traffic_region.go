// Code generated by go-swagger; DO NOT EDIT.

package workload_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1GetMetricsRequestTrafficRegion A geographic or network region to filter traffic metrics for
//
// # This field does not apply when retrieving INSTANCE type metrics
//
// swagger:model v1GetMetricsRequestTrafficRegion
type V1GetMetricsRequestTrafficRegion string

func NewV1GetMetricsRequestTrafficRegion(value V1GetMetricsRequestTrafficRegion) *V1GetMetricsRequestTrafficRegion {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1GetMetricsRequestTrafficRegion.
func (m V1GetMetricsRequestTrafficRegion) Pointer() *V1GetMetricsRequestTrafficRegion {
	return &m
}

const (

	// V1GetMetricsRequestTrafficRegionALL captures enum value "ALL"
	V1GetMetricsRequestTrafficRegionALL V1GetMetricsRequestTrafficRegion = "ALL"

	// V1GetMetricsRequestTrafficRegionLOCALNODE captures enum value "LOCAL_NODE"
	V1GetMetricsRequestTrafficRegionLOCALNODE V1GetMetricsRequestTrafficRegion = "LOCAL_NODE"

	// V1GetMetricsRequestTrafficRegionLOCALPOP captures enum value "LOCAL_POP"
	V1GetMetricsRequestTrafficRegionLOCALPOP V1GetMetricsRequestTrafficRegion = "LOCAL_POP"

	// V1GetMetricsRequestTrafficRegionNORTHAMERICA captures enum value "NORTH_AMERICA"
	V1GetMetricsRequestTrafficRegionNORTHAMERICA V1GetMetricsRequestTrafficRegion = "NORTH_AMERICA"

	// V1GetMetricsRequestTrafficRegionEUROPE captures enum value "EUROPE"
	V1GetMetricsRequestTrafficRegionEUROPE V1GetMetricsRequestTrafficRegion = "EUROPE"

	// V1GetMetricsRequestTrafficRegionASIA captures enum value "ASIA"
	V1GetMetricsRequestTrafficRegionASIA V1GetMetricsRequestTrafficRegion = "ASIA"

	// V1GetMetricsRequestTrafficRegionOCEANIA captures enum value "OCEANIA"
	V1GetMetricsRequestTrafficRegionOCEANIA V1GetMetricsRequestTrafficRegion = "OCEANIA"

	// V1GetMetricsRequestTrafficRegionSOUTHAMERICA captures enum value "SOUTH_AMERICA"
	V1GetMetricsRequestTrafficRegionSOUTHAMERICA V1GetMetricsRequestTrafficRegion = "SOUTH_AMERICA"

	// V1GetMetricsRequestTrafficRegionMARKETPLACE captures enum value "MARKETPLACE"
	V1GetMetricsRequestTrafficRegionMARKETPLACE V1GetMetricsRequestTrafficRegion = "MARKETPLACE"

	// V1GetMetricsRequestTrafficRegionINTERNAL captures enum value "INTERNAL"
	V1GetMetricsRequestTrafficRegionINTERNAL V1GetMetricsRequestTrafficRegion = "INTERNAL"

	// V1GetMetricsRequestTrafficRegionINTERNET captures enum value "INTERNET"
	V1GetMetricsRequestTrafficRegionINTERNET V1GetMetricsRequestTrafficRegion = "INTERNET"

	// V1GetMetricsRequestTrafficRegionAFRICA captures enum value "AFRICA"
	V1GetMetricsRequestTrafficRegionAFRICA V1GetMetricsRequestTrafficRegion = "AFRICA"

	// V1GetMetricsRequestTrafficRegionMIDDLEEAST captures enum value "MIDDLE_EAST"
	V1GetMetricsRequestTrafficRegionMIDDLEEAST V1GetMetricsRequestTrafficRegion = "MIDDLE_EAST"
)

// for schema
var v1GetMetricsRequestTrafficRegionEnum []interface{}

func init() {
	var res []V1GetMetricsRequestTrafficRegion
	if err := json.Unmarshal([]byte(`["ALL","LOCAL_NODE","LOCAL_POP","NORTH_AMERICA","EUROPE","ASIA","OCEANIA","SOUTH_AMERICA","MARKETPLACE","INTERNAL","INTERNET","AFRICA","MIDDLE_EAST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1GetMetricsRequestTrafficRegionEnum = append(v1GetMetricsRequestTrafficRegionEnum, v)
	}
}

func (m V1GetMetricsRequestTrafficRegion) validateV1GetMetricsRequestTrafficRegionEnum(path, location string, value V1GetMetricsRequestTrafficRegion) error {
	if err := validate.EnumCase(path, location, value, v1GetMetricsRequestTrafficRegionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 get metrics request traffic region
func (m V1GetMetricsRequestTrafficRegion) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1GetMetricsRequestTrafficRegionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 get metrics request traffic region based on context it is used
func (m V1GetMetricsRequestTrafficRegion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
